{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nvar FullscreenPortal = function (_Component) {\n  _inherits(FullscreenPortal, _Component);\n\n  function FullscreenPortal(props) {\n    _classCallCheck(this, FullscreenPortal);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.el = document.createElement('div');\n\n    _this.el.classList.add(props.className);\n\n    return _this;\n  }\n\n  FullscreenPortal.prototype.componentDidMount = function componentDidMount() {\n    document.body.appendChild(this.el);\n  };\n\n  FullscreenPortal.prototype.componentWillUnmount = function componentWillUnmount() {\n    document.body.removeChild(this.el);\n  };\n\n  FullscreenPortal.prototype.render = function render() {\n    return createPortal(this.props.children, this.el);\n  };\n\n  return FullscreenPortal;\n}(Component);\n\nFullscreenPortal.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.element,\n  className: PropTypes.string\n} : {};\nexport default FullscreenPortal;","map":null,"metadata":{},"sourceType":"module"}