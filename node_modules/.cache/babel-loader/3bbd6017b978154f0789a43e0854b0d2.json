{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Image from './components/Image';\nimport ZoomImage from './components/ZoomImage';\nimport FullscreenPortal from './components/FullscreenPortal';\nimport './styles.css';\n\nvar InnerImageZoom = function (_Component) {\n  _inherits(InnerImageZoom, _Component);\n\n  function InnerImageZoom(props) {\n    _classCallCheck(this, InnerImageZoom);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.handleInitialTouchStart = function () {\n      var isFullscreen = _this.props.fullscreenOnMobile && window.matchMedia && window.matchMedia('(max-width: ' + _this.props.mobileBreakpoint + 'px)').matches;\n\n      _this.setState({\n        isTouch: true,\n        isFullscreen: isFullscreen\n      });\n    };\n\n    _this.handleTouchStart = function (e) {\n      _this.offsets = _this.getOffsets(e.changedTouches[0].pageX, e.changedTouches[0].pageY, _this.zoomImg.offsetLeft, _this.zoomImg.offsetTop);\n    };\n\n    _this.handleMouseEnter = function () {\n      _this.setState({\n        isActive: true\n      });\n    };\n\n    _this.handleClick = function (e) {\n      if (_this.state.isZoomed) {\n        if (!_this.state.isTouch) {\n          _this.zoomOut();\n        }\n\n        return;\n      }\n\n      if (_this.state.isTouch) {\n        _this.setState({\n          isActive: true\n        });\n      }\n\n      if (_this.isLoaded) {\n        _this.zoomIn(e.pageX, e.pageY);\n      } else {\n        _this.onLoadCallback = _this.zoomIn.bind(_this, e.pageX, e.pageY);\n      }\n    };\n\n    _this.handleLoad = function (e) {\n      _this.isLoaded = true;\n      _this.zoomImg = e.target;\n      _this.bounds = _this.getBounds(_this.img, false);\n      _this.ratios = _this.getRatios(_this.bounds, _this.zoomImg);\n\n      if (_this.onLoadCallback) {\n        _this.onLoadCallback();\n\n        _this.onLoadCallback = null;\n      }\n    };\n\n    _this.handleMouseMove = function (e) {\n      var left = e.pageX - _this.offsets.x;\n      var top = e.pageY - _this.offsets.y;\n      left = Math.max(Math.min(left, _this.bounds.width), 0);\n      top = Math.max(Math.min(top, _this.bounds.height), 0);\n\n      _this.setState({\n        left: left * -_this.ratios.x,\n        top: top * -_this.ratios.y\n      });\n    };\n\n    _this.handleTouchMove = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var left = e.changedTouches[0].pageX - _this.offsets.x;\n      var top = e.changedTouches[0].pageY - _this.offsets.y;\n      left = Math.max(Math.min(left, 0), (_this.zoomImg.offsetWidth - _this.bounds.width) * -1);\n      top = Math.max(Math.min(top, 0), (_this.zoomImg.offsetHeight - _this.bounds.height) * -1);\n\n      _this.setState({\n        left: left,\n        top: top\n      });\n    };\n\n    _this.handleCloseClick = function () {\n      _this.zoomOut(function () {\n        setTimeout(function () {\n          if (_this.state.isTouch) {\n            _this.zoomImg.removeEventListener('touchmove', _this.handleTouchMove, {\n              passive: false\n            });\n          }\n\n          _this.setDefaults();\n\n          _this.setState({\n            isActive: false,\n            isTouch: false,\n            isFullscreen: false\n          });\n        }, _this.props.fadeDuration);\n      });\n    };\n\n    _this.initialMove = function (pageX, pageY) {\n      _this.offsets = _this.getOffsets(window.pageXOffset, window.pageYOffset, -_this.bounds.left, -_this.bounds.top);\n\n      _this.handleMouseMove({\n        pageX: pageX,\n        pageY: pageY\n      });\n    };\n\n    _this.initialTouchMove = function (pageX, pageY) {\n      var initialPageX = (pageX - (window.pageXOffset + _this.bounds.left)) * -_this.ratios.x;\n      var initialPageY = (pageY - (window.pageYOffset + _this.bounds.top)) * -_this.ratios.y;\n      _this.bounds = _this.getBounds(_this.img, _this.state.isFullscreen);\n      _this.offsets = _this.getOffsets(0, 0, 0, 0);\n\n      _this.handleTouchMove({\n        changedTouches: [{\n          pageX: initialPageX,\n          pageY: initialPageY\n        }],\n        preventDefault: function preventDefault() {},\n        stopPropagation: function stopPropagation() {}\n      });\n    };\n\n    _this.zoomIn = function (pageX, pageY) {\n      _this.setState({\n        isZoomed: true\n      }, function () {\n        var initialMove = _this.state.isTouch ? _this.initialTouchMove : _this.initialMove;\n        initialMove(pageX, pageY);\n\n        if (_this.state.isTouch) {\n          _this.zoomImg.addEventListener('touchmove', _this.handleTouchMove, {\n            passive: false\n          });\n        }\n\n        if (_this.props.afterZoomIn) {\n          _this.props.afterZoomIn();\n        }\n      });\n    };\n\n    _this.zoomOut = function (callback) {\n      _this.setState({\n        isZoomed: false\n      }, function () {\n        if (_this.props.afterZoomOut) {\n          _this.props.afterZoomOut();\n        }\n\n        if (callback) {\n          callback();\n        }\n      });\n    };\n\n    _this.setDefaults = function () {\n      _this.isLoaded = false;\n      _this.onLoadCallback = null;\n      _this.zoomImg = null;\n      _this.bounds = {};\n      _this.offsets = {};\n      _this.ratios = {};\n    };\n\n    _this.getBounds = function (img, isFullscreen) {\n      if (isFullscreen) {\n        return {\n          width: window.innerWidth,\n          height: window.innerHeight,\n          left: 0,\n          top: 0\n        };\n      }\n\n      return img.getBoundingClientRect();\n    };\n\n    _this.getOffsets = function (pageX, pageY, left, top) {\n      return {\n        x: pageX - left,\n        y: pageY - top\n      };\n    };\n\n    _this.getRatios = function (bounds, zoomImg) {\n      return {\n        x: (zoomImg.offsetWidth - bounds.width) / bounds.width,\n        y: (zoomImg.offsetHeight - bounds.height) / bounds.height\n      };\n    };\n\n    _this.state = {\n      isActive: false,\n      isTouch: false,\n      isZoomed: false,\n      isFullscreen: false,\n      left: 0,\n      top: 0\n    };\n\n    _this.setDefaults();\n\n    return _this;\n  }\n\n  InnerImageZoom.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        src = _props.src,\n        srcSet = _props.srcSet,\n        sizes = _props.sizes,\n        sources = _props.sources,\n        zoomSrc = _props.zoomSrc,\n        alt = _props.alt,\n        fadeDuration = _props.fadeDuration,\n        className = _props.className;\n    var zoomImageProps = {\n      src: zoomSrc || src,\n      fadeDuration: this.state.isFullscreen ? 0 : fadeDuration,\n      top: this.state.top,\n      left: this.state.left,\n      isZoomed: this.state.isZoomed,\n      onLoad: this.handleLoad,\n      onTouchStart: this.handleTouchStart,\n      onClose: this.state.isTouch ? this.handleCloseClick : null\n    };\n    return React.createElement('figure', {\n      className: 'iiz ' + (className ? className : ''),\n      ref: function ref(el) {\n        _this2.img = el;\n      },\n      onTouchStart: this.handleInitialTouchStart,\n      onClick: this.handleClick,\n      onMouseEnter: this.state.isTouch ? null : this.handleMouseEnter,\n      onMouseMove: this.state.isTouch || !this.state.isZoomed ? null : this.handleMouseMove,\n      onMouseLeave: this.state.isTouch ? null : this.handleCloseClick\n    }, React.createElement(Image, {\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      sources: sources,\n      alt: alt\n    }), this.state.isActive && React.createElement(Fragment, null, this.state.isFullscreen ? React.createElement(FullscreenPortal, {\n      className: 'iiz__zoom-portal'\n    }, React.createElement(ZoomImage, zoomImageProps)) : React.createElement(ZoomImage, zoomImageProps)), !this.state.isZoomed && React.createElement('span', {\n      className: 'iiz__btn iiz__hint'\n    }));\n  };\n\n  return InnerImageZoom;\n}(Component);\n\nInnerImageZoom.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  src: PropTypes.string.isRequired,\n  srcSet: PropTypes.string,\n  sizes: PropTypes.string,\n  sources: PropTypes.array,\n  zoomSrc: PropTypes.string,\n  alt: PropTypes.string,\n  fadeDuration: PropTypes.number,\n  fullscreenOnMobile: PropTypes.bool,\n  mobileBreakpoint: PropTypes.number,\n  className: PropTypes.string,\n  afterZoomIn: PropTypes.func,\n  afterZoomOut: PropTypes.func\n} : {};\nInnerImageZoom.defaultProps = {\n  fadeDuration: 150,\n  mobileBreakpoint: 640\n};\nexport default InnerImageZoom;","map":null,"metadata":{},"sourceType":"module"}